package com.bubble.contracts.wasm;

import com.bubble.abi.wasm.WasmEventEncoder;
import com.bubble.abi.wasm.WasmFunctionEncoder;
import com.bubble.abi.wasm.datatypes.WasmEvent;
import com.bubble.abi.wasm.datatypes.WasmEventParameter;
import com.bubble.abi.wasm.datatypes.WasmFunction;
import com.bubble.crypto.Credentials;
import com.bubble.protocol.Web3j;
import com.bubble.protocol.core.DefaultBlockParameter;
import com.bubble.protocol.core.RemoteCall;
import com.bubble.protocol.core.methods.request.BubbleFilter;
import com.bubble.protocol.core.methods.response.Log;
import com.bubble.protocol.core.methods.response.TransactionReceipt;
import com.bubble.rlp.wasm.ParameterizedTypeImpl;
import com.bubble.rlp.wasm.datatypes.*;
import com.bubble.tx.TransactionManager;
import com.bubble.tx.WasmContract;
import com.bubble.tx.gas.GasProvider;
import rx.Observable;
import rx.functions.Func1;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://github.com/Bubblenetwork/client-sdk-java/releases">bubble-web3j command line tools</a>,
 * or the org.web3j.codegen.WasmFunctionWrapperGenerator in the 
 * <a href="https://github.com/Bubblenetwork/client-sdk-java/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with bubble-web3j version 0.13.1.0.
 */
public class EventTopic extends WasmContract {
    private static String BINARY_0 = "";

    public static String BINARY = BINARY_0;

    public static final String FUNC_SETSTRINGANDADDRESSANDBOOLEAN = "setStringAndAddressAndBoolean";

    public static final String FUNC_SETINTNUMBER = "setIntNumber";

    public static final String FUNC_SETUINTNUMBER = "setUintNumber";

    public static final String FUNC_SETINTARRAY = "setIntArray";

    public static final String FUNC_SETUINTARRAY = "setUintArray";

    public static final String FUNC_SETINTVECTOR = "setIntVector";

    public static final String FUNC_SETUINTVECTOR = "setUintVector";

    public static final String FUNC_SETINTLIST = "setIntList";

    public static final String FUNC_SETUINTLIST = "setUintList";

    public static final WasmEvent STRINGANDADDRANDBOOLEAN_EVENT = new WasmEvent("stringAndAddrAndBoolean", Arrays.asList(new WasmEventParameter(String.class, true) , new WasmEventParameter(WasmAddress.class, true) , new WasmEventParameter(Boolean.class, true)), Arrays.asList());
    ;

    public static final WasmEvent INTNUMBER_EVENT = new WasmEvent("intNumber", Arrays.asList(new WasmEventParameter(Int8.class, true) , new WasmEventParameter(Int16.class, true)), Arrays.asList());
    ;

    public static final WasmEvent UINTNUMBER_EVENT = new WasmEvent("uintNumber", Arrays.asList(new WasmEventParameter(Uint8.class, true) , new WasmEventParameter(Uint16.class, true)), Arrays.asList());
    ;

    public static final WasmEvent INTARRAY_EVENT = new WasmEvent("intArray", Arrays.asList(new WasmEventParameter(Int8[].class, true) , new WasmEventParameter(Int16[].class, true)), Arrays.asList());
    ;

    public static final WasmEvent UINTARRAY_EVENT = new WasmEvent("uintArray", Arrays.asList(new WasmEventParameter(Uint8[].class, true) , new WasmEventParameter(Uint16[].class, true)), Arrays.asList());
    ;

    public static final WasmEvent INTVECTOR_EVENT = new WasmEvent("intVector", Arrays.asList(new WasmEventParameter(Int8[].class, true) , new WasmEventParameter(Int16[].class, true)), Arrays.asList());
    ;

    public static final WasmEvent UINTVECTOR_EVENT = new WasmEvent("uintVector", Arrays.asList(new WasmEventParameter(byte[].class, true) , new WasmEventParameter(Uint16[].class, true)), Arrays.asList());
    ;

    public static final WasmEvent INTLIST_EVENT = new WasmEvent("intList", Arrays.asList(new WasmEventParameter(List.class, 
            new ParameterizedTypeImpl(
            new java.lang.reflect.Type[] {Int8.class},
            List.class,
            List.class), true) , new WasmEventParameter(List.class,
            new ParameterizedTypeImpl(
            new java.lang.reflect.Type[] {Int16.class},
            List.class,
            List.class), true)), Arrays.asList());
    ;

    public static final WasmEvent UINTLIST_EVENT = new WasmEvent("uintList", Arrays.asList(new WasmEventParameter(List.class, 
            new ParameterizedTypeImpl(
            new java.lang.reflect.Type[] {Uint8.class},
            List.class,
            List.class), true) , new WasmEventParameter(List.class,
            new ParameterizedTypeImpl(
            new java.lang.reflect.Type[] {Uint16.class},
            List.class,
            List.class), true)), Arrays.asList());
    ;

    protected EventTopic(String contractAddress, Web3j web3j, Credentials credentials, GasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    protected EventTopic(String contractAddress, Web3j web3j, TransactionManager transactionManager, GasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<StringAndAddrAndBooleanEventResponse> getStringAndAddrAndBooleanEvents(TransactionReceipt transactionReceipt) {
        List<WasmEventValuesWithLog> valueList = extractEventParametersWithLog(STRINGANDADDRANDBOOLEAN_EVENT, transactionReceipt);
        ArrayList<StringAndAddrAndBooleanEventResponse> responses = new ArrayList<StringAndAddrAndBooleanEventResponse>(valueList.size());
        for (WasmEventValuesWithLog eventValues : valueList) {
            StringAndAddrAndBooleanEventResponse typedResponse = new StringAndAddrAndBooleanEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.topic1 = (String) eventValues.getIndexedValues().get(0);
            typedResponse.topic2 = (String) eventValues.getIndexedValues().get(1);
            typedResponse.topic3 = (String) eventValues.getIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<StringAndAddrAndBooleanEventResponse> stringAndAddrAndBooleanEventObservable(BubbleFilter filter) {
        return web3j.bubbleLogObservable(filter).map(new Func1<Log, StringAndAddrAndBooleanEventResponse>() {
            @Override
            public StringAndAddrAndBooleanEventResponse call(Log log) {
                WasmEventValuesWithLog eventValues = extractEventParametersWithLog(STRINGANDADDRANDBOOLEAN_EVENT, log);
                StringAndAddrAndBooleanEventResponse typedResponse = new StringAndAddrAndBooleanEventResponse();
                typedResponse.log = log;
                typedResponse.topic1 = (String) eventValues.getIndexedValues().get(0);
                typedResponse.topic2 = (String) eventValues.getIndexedValues().get(1);
                typedResponse.topic3 = (String) eventValues.getIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Observable<StringAndAddrAndBooleanEventResponse> stringAndAddrAndBooleanEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BubbleFilter filter = new BubbleFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(WasmEventEncoder.encode(STRINGANDADDRANDBOOLEAN_EVENT));
        return stringAndAddrAndBooleanEventObservable(filter);
    }

    public List<IntNumberEventResponse> getIntNumberEvents(TransactionReceipt transactionReceipt) {
        List<WasmEventValuesWithLog> valueList = extractEventParametersWithLog(INTNUMBER_EVENT, transactionReceipt);
        ArrayList<IntNumberEventResponse> responses = new ArrayList<IntNumberEventResponse>(valueList.size());
        for (WasmEventValuesWithLog eventValues : valueList) {
            IntNumberEventResponse typedResponse = new IntNumberEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.topic1 = (String) eventValues.getIndexedValues().get(0);
            typedResponse.topic2 = (String) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<IntNumberEventResponse> intNumberEventObservable(BubbleFilter filter) {
        return web3j.bubbleLogObservable(filter).map(new Func1<Log, IntNumberEventResponse>() {
            @Override
            public IntNumberEventResponse call(Log log) {
                WasmEventValuesWithLog eventValues = extractEventParametersWithLog(INTNUMBER_EVENT, log);
                IntNumberEventResponse typedResponse = new IntNumberEventResponse();
                typedResponse.log = log;
                typedResponse.topic1 = (String) eventValues.getIndexedValues().get(0);
                typedResponse.topic2 = (String) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<IntNumberEventResponse> intNumberEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BubbleFilter filter = new BubbleFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(WasmEventEncoder.encode(INTNUMBER_EVENT));
        return intNumberEventObservable(filter);
    }

    public List<UintNumberEventResponse> getUintNumberEvents(TransactionReceipt transactionReceipt) {
        List<WasmEventValuesWithLog> valueList = extractEventParametersWithLog(UINTNUMBER_EVENT, transactionReceipt);
        ArrayList<UintNumberEventResponse> responses = new ArrayList<UintNumberEventResponse>(valueList.size());
        for (WasmEventValuesWithLog eventValues : valueList) {
            UintNumberEventResponse typedResponse = new UintNumberEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.topic1 = (String) eventValues.getIndexedValues().get(0);
            typedResponse.topic2 = (String) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UintNumberEventResponse> uintNumberEventObservable(BubbleFilter filter) {
        return web3j.bubbleLogObservable(filter).map(new Func1<Log, UintNumberEventResponse>() {
            @Override
            public UintNumberEventResponse call(Log log) {
                WasmEventValuesWithLog eventValues = extractEventParametersWithLog(UINTNUMBER_EVENT, log);
                UintNumberEventResponse typedResponse = new UintNumberEventResponse();
                typedResponse.log = log;
                typedResponse.topic1 = (String) eventValues.getIndexedValues().get(0);
                typedResponse.topic2 = (String) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<UintNumberEventResponse> uintNumberEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BubbleFilter filter = new BubbleFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(WasmEventEncoder.encode(UINTNUMBER_EVENT));
        return uintNumberEventObservable(filter);
    }

    public List<IntArrayEventResponse> getIntArrayEvents(TransactionReceipt transactionReceipt) {
        List<WasmEventValuesWithLog> valueList = extractEventParametersWithLog(INTARRAY_EVENT, transactionReceipt);
        ArrayList<IntArrayEventResponse> responses = new ArrayList<IntArrayEventResponse>(valueList.size());
        for (WasmEventValuesWithLog eventValues : valueList) {
            IntArrayEventResponse typedResponse = new IntArrayEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.topic1 = (String) eventValues.getIndexedValues().get(0);
            typedResponse.topic2 = (String) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<IntArrayEventResponse> intArrayEventObservable(BubbleFilter filter) {
        return web3j.bubbleLogObservable(filter).map(new Func1<Log, IntArrayEventResponse>() {
            @Override
            public IntArrayEventResponse call(Log log) {
                WasmEventValuesWithLog eventValues = extractEventParametersWithLog(INTARRAY_EVENT, log);
                IntArrayEventResponse typedResponse = new IntArrayEventResponse();
                typedResponse.log = log;
                typedResponse.topic1 = (String) eventValues.getIndexedValues().get(0);
                typedResponse.topic2 = (String) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<IntArrayEventResponse> intArrayEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BubbleFilter filter = new BubbleFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(WasmEventEncoder.encode(INTARRAY_EVENT));
        return intArrayEventObservable(filter);
    }

    public List<UintArrayEventResponse> getUintArrayEvents(TransactionReceipt transactionReceipt) {
        List<WasmEventValuesWithLog> valueList = extractEventParametersWithLog(UINTARRAY_EVENT, transactionReceipt);
        ArrayList<UintArrayEventResponse> responses = new ArrayList<UintArrayEventResponse>(valueList.size());
        for (WasmEventValuesWithLog eventValues : valueList) {
            UintArrayEventResponse typedResponse = new UintArrayEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.topic1 = (String) eventValues.getIndexedValues().get(0);
            typedResponse.topic2 = (String) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UintArrayEventResponse> uintArrayEventObservable(BubbleFilter filter) {
        return web3j.bubbleLogObservable(filter).map(new Func1<Log, UintArrayEventResponse>() {
            @Override
            public UintArrayEventResponse call(Log log) {
                WasmEventValuesWithLog eventValues = extractEventParametersWithLog(UINTARRAY_EVENT, log);
                UintArrayEventResponse typedResponse = new UintArrayEventResponse();
                typedResponse.log = log;
                typedResponse.topic1 = (String) eventValues.getIndexedValues().get(0);
                typedResponse.topic2 = (String) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<UintArrayEventResponse> uintArrayEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BubbleFilter filter = new BubbleFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(WasmEventEncoder.encode(UINTARRAY_EVENT));
        return uintArrayEventObservable(filter);
    }

    public List<IntVectorEventResponse> getIntVectorEvents(TransactionReceipt transactionReceipt) {
        List<WasmEventValuesWithLog> valueList = extractEventParametersWithLog(INTVECTOR_EVENT, transactionReceipt);
        ArrayList<IntVectorEventResponse> responses = new ArrayList<IntVectorEventResponse>(valueList.size());
        for (WasmEventValuesWithLog eventValues : valueList) {
            IntVectorEventResponse typedResponse = new IntVectorEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.topic1 = (String) eventValues.getIndexedValues().get(0);
            typedResponse.topic2 = (String) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<IntVectorEventResponse> intVectorEventObservable(BubbleFilter filter) {
        return web3j.bubbleLogObservable(filter).map(new Func1<Log, IntVectorEventResponse>() {
            @Override
            public IntVectorEventResponse call(Log log) {
                WasmEventValuesWithLog eventValues = extractEventParametersWithLog(INTVECTOR_EVENT, log);
                IntVectorEventResponse typedResponse = new IntVectorEventResponse();
                typedResponse.log = log;
                typedResponse.topic1 = (String) eventValues.getIndexedValues().get(0);
                typedResponse.topic2 = (String) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<IntVectorEventResponse> intVectorEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BubbleFilter filter = new BubbleFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(WasmEventEncoder.encode(INTVECTOR_EVENT));
        return intVectorEventObservable(filter);
    }

    public List<UintVectorEventResponse> getUintVectorEvents(TransactionReceipt transactionReceipt) {
        List<WasmEventValuesWithLog> valueList = extractEventParametersWithLog(UINTVECTOR_EVENT, transactionReceipt);
        ArrayList<UintVectorEventResponse> responses = new ArrayList<UintVectorEventResponse>(valueList.size());
        for (WasmEventValuesWithLog eventValues : valueList) {
            UintVectorEventResponse typedResponse = new UintVectorEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.topic1 = (String) eventValues.getIndexedValues().get(0);
            typedResponse.topic2 = (String) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UintVectorEventResponse> uintVectorEventObservable(BubbleFilter filter) {
        return web3j.bubbleLogObservable(filter).map(new Func1<Log, UintVectorEventResponse>() {
            @Override
            public UintVectorEventResponse call(Log log) {
                WasmEventValuesWithLog eventValues = extractEventParametersWithLog(UINTVECTOR_EVENT, log);
                UintVectorEventResponse typedResponse = new UintVectorEventResponse();
                typedResponse.log = log;
                typedResponse.topic1 = (String) eventValues.getIndexedValues().get(0);
                typedResponse.topic2 = (String) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<UintVectorEventResponse> uintVectorEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BubbleFilter filter = new BubbleFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(WasmEventEncoder.encode(UINTVECTOR_EVENT));
        return uintVectorEventObservable(filter);
    }

    public List<IntListEventResponse> getIntListEvents(TransactionReceipt transactionReceipt) {
        List<WasmEventValuesWithLog> valueList = extractEventParametersWithLog(INTLIST_EVENT, transactionReceipt);
        ArrayList<IntListEventResponse> responses = new ArrayList<IntListEventResponse>(valueList.size());
        for (WasmEventValuesWithLog eventValues : valueList) {
            IntListEventResponse typedResponse = new IntListEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.topic1 = (String) eventValues.getIndexedValues().get(0);
            typedResponse.topic2 = (String) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<IntListEventResponse> intListEventObservable(BubbleFilter filter) {
        return web3j.bubbleLogObservable(filter).map(new Func1<Log, IntListEventResponse>() {
            @Override
            public IntListEventResponse call(Log log) {
                WasmEventValuesWithLog eventValues = extractEventParametersWithLog(INTLIST_EVENT, log);
                IntListEventResponse typedResponse = new IntListEventResponse();
                typedResponse.log = log;
                typedResponse.topic1 = (String) eventValues.getIndexedValues().get(0);
                typedResponse.topic2 = (String) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<IntListEventResponse> intListEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BubbleFilter filter = new BubbleFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(WasmEventEncoder.encode(INTLIST_EVENT));
        return intListEventObservable(filter);
    }

    public List<UintListEventResponse> getUintListEvents(TransactionReceipt transactionReceipt) {
        List<WasmEventValuesWithLog> valueList = extractEventParametersWithLog(UINTLIST_EVENT, transactionReceipt);
        ArrayList<UintListEventResponse> responses = new ArrayList<UintListEventResponse>(valueList.size());
        for (WasmEventValuesWithLog eventValues : valueList) {
            UintListEventResponse typedResponse = new UintListEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.topic1 = (String) eventValues.getIndexedValues().get(0);
            typedResponse.topic2 = (String) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UintListEventResponse> uintListEventObservable(BubbleFilter filter) {
        return web3j.bubbleLogObservable(filter).map(new Func1<Log, UintListEventResponse>() {
            @Override
            public UintListEventResponse call(Log log) {
                WasmEventValuesWithLog eventValues = extractEventParametersWithLog(UINTLIST_EVENT, log);
                UintListEventResponse typedResponse = new UintListEventResponse();
                typedResponse.log = log;
                typedResponse.topic1 = (String) eventValues.getIndexedValues().get(0);
                typedResponse.topic2 = (String) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<UintListEventResponse> uintListEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BubbleFilter filter = new BubbleFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(WasmEventEncoder.encode(UINTLIST_EVENT));
        return uintListEventObservable(filter);
    }

    public static RemoteCall<EventTopic> deploy(Web3j web3j, Credentials credentials, GasProvider contractGasProvider) {
        String encodedConstructor = WasmFunctionEncoder.encodeConstructor(BINARY, Arrays.asList());
        return deployRemoteCall(EventTopic.class, web3j, credentials, contractGasProvider, encodedConstructor);
    }

    public static RemoteCall<EventTopic> deploy(Web3j web3j, TransactionManager transactionManager, GasProvider contractGasProvider) {
        String encodedConstructor = WasmFunctionEncoder.encodeConstructor(BINARY, Arrays.asList());
        return deployRemoteCall(EventTopic.class, web3j, transactionManager, contractGasProvider, encodedConstructor);
    }

    public static RemoteCall<EventTopic> deploy(Web3j web3j, Credentials credentials, GasProvider contractGasProvider, BigInteger initialVonValue) {
        String encodedConstructor = WasmFunctionEncoder.encodeConstructor(BINARY, Arrays.asList());
        return deployRemoteCall(EventTopic.class, web3j, credentials, contractGasProvider, encodedConstructor, initialVonValue);
    }

    public static RemoteCall<EventTopic> deploy(Web3j web3j, TransactionManager transactionManager, GasProvider contractGasProvider, BigInteger initialVonValue) {
        String encodedConstructor = WasmFunctionEncoder.encodeConstructor(BINARY, Arrays.asList());
        return deployRemoteCall(EventTopic.class, web3j, transactionManager, contractGasProvider, encodedConstructor, initialVonValue);
    }

    public RemoteCall<TransactionReceipt> setStringAndAddressAndBoolean(String name, WasmAddress address, Boolean b) {
        final WasmFunction function = new WasmFunction(FUNC_SETSTRINGANDADDRESSANDBOOLEAN, Arrays.asList(name,address,b), Void.class);
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setStringAndAddressAndBoolean(String name, WasmAddress address, Boolean b, BigInteger vonValue) {
        final WasmFunction function = new WasmFunction(FUNC_SETSTRINGANDADDRESSANDBOOLEAN, Arrays.asList(name,address,b), Void.class);
        return executeRemoteCallTransaction(function, vonValue);
    }

    public RemoteCall<TransactionReceipt> setIntNumber(Int8 i8, Int16 i16) {
        final WasmFunction function = new WasmFunction(FUNC_SETINTNUMBER, Arrays.asList(i8,i16), Void.class);
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setIntNumber(Int8 i8, Int16 i16, BigInteger vonValue) {
        final WasmFunction function = new WasmFunction(FUNC_SETINTNUMBER, Arrays.asList(i8,i16), Void.class);
        return executeRemoteCallTransaction(function, vonValue);
    }

    public RemoteCall<TransactionReceipt> setUintNumber(Uint8 ui8, Uint16 ui16) {
        final WasmFunction function = new WasmFunction(FUNC_SETUINTNUMBER, Arrays.asList(ui8,ui16), Void.class);
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setUintNumber(Uint8 ui8, Uint16 ui16, BigInteger vonValue) {
        final WasmFunction function = new WasmFunction(FUNC_SETUINTNUMBER, Arrays.asList(ui8,ui16), Void.class);
        return executeRemoteCallTransaction(function, vonValue);
    }

    public RemoteCall<TransactionReceipt> setIntArray(Int8[] i8Array, Int16[] i16Array) {
        final WasmFunction function = new WasmFunction(FUNC_SETINTARRAY, Arrays.asList(i8Array,i16Array), Void.class);
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setIntArray(Int8[] i8Array, Int16[] i16Array, BigInteger vonValue) {
        final WasmFunction function = new WasmFunction(FUNC_SETINTARRAY, Arrays.asList(i8Array,i16Array), Void.class);
        return executeRemoteCallTransaction(function, vonValue);
    }

    public RemoteCall<TransactionReceipt> setUintArray(Uint8[] ui8Array, Uint16[] ui16Array) {
        final WasmFunction function = new WasmFunction(FUNC_SETUINTARRAY, Arrays.asList(ui8Array,ui16Array), Void.class);
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setUintArray(Uint8[] ui8Array, Uint16[] ui16Array, BigInteger vonValue) {
        final WasmFunction function = new WasmFunction(FUNC_SETUINTARRAY, Arrays.asList(ui8Array,ui16Array), Void.class);
        return executeRemoteCallTransaction(function, vonValue);
    }

    public RemoteCall<TransactionReceipt> setIntVector(Int8[] i8Array, Int16[] i16Array) {
        final WasmFunction function = new WasmFunction(FUNC_SETINTVECTOR, Arrays.asList(i8Array,i16Array), Void.class);
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setIntVector(Int8[] i8Array, Int16[] i16Array, BigInteger vonValue) {
        final WasmFunction function = new WasmFunction(FUNC_SETINTVECTOR, Arrays.asList(i8Array,i16Array), Void.class);
        return executeRemoteCallTransaction(function, vonValue);
    }

    public RemoteCall<TransactionReceipt> setUintVector(byte[] ui8Array, Uint16[] ui16Array) {
        final WasmFunction function = new WasmFunction(FUNC_SETUINTVECTOR, Arrays.asList(ui8Array,ui16Array), Void.class);
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setUintVector(byte[] ui8Array, Uint16[] ui16Array, BigInteger vonValue) {
        final WasmFunction function = new WasmFunction(FUNC_SETUINTVECTOR, Arrays.asList(ui8Array,ui16Array), Void.class);
        return executeRemoteCallTransaction(function, vonValue);
    }

    public RemoteCall<TransactionReceipt> setIntList(List<Int8> i8Array, List<Int16> i16Array) {
        final WasmFunction function = new WasmFunction(FUNC_SETINTLIST, Arrays.asList(i8Array,i16Array), Void.class);
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setIntList(List<Int8> i8Array, List<Int16> i16Array, BigInteger vonValue) {
        final WasmFunction function = new WasmFunction(FUNC_SETINTLIST, Arrays.asList(i8Array,i16Array), Void.class);
        return executeRemoteCallTransaction(function, vonValue);
    }

    public RemoteCall<TransactionReceipt> setUintList(List<Uint8> ui8Array, List<Uint16> ui16Array) {
        final WasmFunction function = new WasmFunction(FUNC_SETUINTLIST, Arrays.asList(ui8Array,ui16Array), Void.class);
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setUintList(List<Uint8> ui8Array, List<Uint16> ui16Array, BigInteger vonValue) {
        final WasmFunction function = new WasmFunction(FUNC_SETUINTLIST, Arrays.asList(ui8Array,ui16Array), Void.class);
        return executeRemoteCallTransaction(function, vonValue);
    }

    public static EventTopic load(String contractAddress, Web3j web3j, Credentials credentials, GasProvider contractGasProvider) {
        return new EventTopic(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static EventTopic load(String contractAddress, Web3j web3j, TransactionManager transactionManager, GasProvider contractGasProvider) {
        return new EventTopic(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static class StringAndAddrAndBooleanEventResponse {
        public Log log;

        public String topic1;

        public String topic2;

        public String topic3;
    }

    public static class IntNumberEventResponse {
        public Log log;

        public String topic1;

        public String topic2;
    }

    public static class UintNumberEventResponse {
        public Log log;

        public String topic1;

        public String topic2;
    }

    public static class IntArrayEventResponse {
        public Log log;

        public String topic1;

        public String topic2;
    }

    public static class UintArrayEventResponse {
        public Log log;

        public String topic1;

        public String topic2;
    }

    public static class IntVectorEventResponse {
        public Log log;

        public String topic1;

        public String topic2;
    }

    public static class UintVectorEventResponse {
        public Log log;

        public String topic1;

        public String topic2;
    }

    public static class IntListEventResponse {
        public Log log;

        public String topic1;

        public String topic2;
    }

    public static class UintListEventResponse {
        public Log log;

        public String topic1;

        public String topic2;
    }
}
